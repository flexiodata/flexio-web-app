{
    "eid_type": "PIP",
    "name": "example-currency-converter",
    "title": "Currency Converter",
    "description": "Converts a currency amount from one currency type to another",
    "deploy_mode": "R",
    "deploy_api": "A",
    "deploy_schedule": "I",
    "deploy_email": "I",
    "deploy_ui": "I",
    "examples": [
        "100, \"USD\", \"EUR\"",
        "200, \"EUR\", \"USD\", \"2018-12-31\"",
        "A1, B1, C1"
    ],
    "params": [
        {
            "name": "amt",
            "type": "number",
            "description": "The value to convert from one currency to another",
            "required": true
        },
        {
            "name": "cur1",
            "type": "string",
            "description": "The currency type to convert from",
            "required": true
        },
        {
            "name": "cur2",
            "type": "string",
            "description": "The currency type to convert to",
            "required": true
        },
        {
            "name": "date",
            "type": "date",
            "description": "The exchange rate date in YYYY-DD-MM format",
            "required": false
        }
    ],
    "notes": "This function uses the https://exchangeratesapi.io API to convert the rates from one into another.\n\nThe following currency types are allowed: CAD, HKD, ISK, PHP, DKK, HUF, CZK, GBP, RON, SEK, IDR, INR, BRL, RUB, HRK, JPY, THB, CHF, EUR, MYR, BGN, TRY, CNY, NOK, NZD, ZAR, USD, MXN, SGD, AUD, ILS, KRW, PLN",
    "task": {
        "op": "sequence",
        "items": [
            {
                "op": "execute",
                "lang": "python",
                "code": "CiMgLS0tCiMgbmFtZTogY3VycmVuY3ktY29udmVydGVyCiMgZGVwbG95ZWQ6IHRydWUKIyB0aXRsZTogQ3VycmVuY3kgQ29udmVydGVyCiMgZGVzY3JpcHRpb246IENvbnZlcnRzIGEgY3VycmVuY3kgYW1vdW50IGZyb20gb25lIGN1cnJlbmN5IHR5cGUgdG8gYW5vdGhlcgojIHBhcmFtczoKIyAtIG5hbWU6IGFtdAojICAgdHlwZTogbnVtYmVyCiMgICBkZXNjcmlwdGlvbjogVGhlIHZhbHVlIHRvIGNvbnZlcnQgZnJvbSBvbmUgY3VycmVuY3kgdG8gYW5vdGhlcgojICAgcmVxdWlyZWQ6IHRydWUKIyAtIG5hbWU6IGN1cjEKIyAgIHR5cGU6IHN0cmluZwojICAgZGVzY3JpcHRpb246IFRoZSBjdXJyZW5jeSB0eXBlIHRvIGNvbnZlcnQgZnJvbQojICAgcmVxdWlyZWQ6IHRydWUKIyAtIG5hbWU6IGN1cjIKIyAgIHR5cGU6IHN0cmluZwojICAgZGVzY3JpcHRpb246IFRoZSBjdXJyZW5jeSB0eXBlIHRvIGNvbnZlcnQgdG8KIyAgIHJlcXVpcmVkOiB0cnVlCiMgLSBuYW1lOiBkYXRlCiMgICB0eXBlOiBkYXRlCiMgICBkZXNjcmlwdGlvbjogVGhlIGV4Y2hhbmdlIHJhdGUgZGF0ZSBpbiBZWVlZLURELU1NIGZvcm1hdAojICAgcmVxdWlyZWQ6IGZhbHNlCiMgZXhhbXBsZXM6CiMgLSAnMTAwLCAiVVNEIiwgIkVVUiInCiMgLSAnMjAwLCAiRVVSIiwgIlVTRCIsICIyMDE4LTEyLTMxIicKIyAtICdBMSwgQjEsIEMxJwojIG5vdGVzOiB8LQojICAgVGhpcyBmdW5jdGlvbiB1c2VzIHRoZSBodHRwczovL2V4Y2hhbmdlcmF0ZXNhcGkuaW8gQVBJIHRvIGNvbnZlcnQgdGhlIHJhdGVzIGZyb20gb25lIGludG8gYW5vdGhlci4KIwojICAgVGhlIGZvbGxvd2luZyBjdXJyZW5jeSB0eXBlcyBhcmUgYWxsb3dlZDogQ0FELCBIS0QsIElTSywgUEhQLCBES0ssIEhVRiwgQ1pLLCBHQlAsIFJPTiwgU0VLLCBJRFIsIElOUiwgQlJMLCBSVUIsIEhSSywgSlBZLCBUSEIsIENIRiwgRVVSLCBNWVIsIEJHTiwgVFJZLCBDTlksIE5PSywgTlpELCBaQVIsIFVTRCwgTVhOLCBTR0QsIEFVRCwgSUxTLCBLUlcsIFBMTgojIC0tLQoKCmltcG9ydCBqc29uCmltcG9ydCByZXF1ZXN0cwpmcm9tIGRhdGV0aW1lIGltcG9ydCAqCmZyb20gY2VyYmVydXMgaW1wb3J0IFZhbGlkYXRvcgpmcm9tIGNvbGxlY3Rpb25zIGltcG9ydCBPcmRlcmVkRGljdAoKIyBtYWluIGZ1bmN0aW9uIGVudHJ5IHBvaW50CmRlZiBmbGV4aW9faGFuZGxlcihmbGV4KToKCiAgICAjIGdldCB0aGUgaW5wdXQKICAgIGlucHV0ID0gZmxleC5pbnB1dC5yZWFkKCkKICAgIHRyeToKICAgICAgICBpbnB1dCA9IGpzb24ubG9hZHMoaW5wdXQpCiAgICAgICAgaWYgbm90IGlzaW5zdGFuY2UoaW5wdXQsIGxpc3QpOiByYWlzZSBWYWx1ZUVycm9yCiAgICBleGNlcHQgVmFsdWVFcnJvcjoKICAgICAgICByYWlzZSBWYWx1ZUVycm9yCgogICAgIyBkZWZpbmUgdGhlIGV4cGVjdGVkIHBhcmFtZXRlcnMgYW5kIG1hcCB0aGUgdmFsdWVzIHRvIHRoZSBwYXJhbWV0ZXIgbmFtZXMKICAgICMgYmFzZWQgb24gdGhlIHBvc2l0aW9ucyBvZiB0aGUga2V5cy92YWx1ZXMKICAgIHBhcmFtcyA9IE9yZGVyZWREaWN0KCkKICAgIHBhcmFtc1snYW10J10gPSB7J3JlcXVpcmVkJzogVHJ1ZSwgJ3R5cGUnOiAnbnVtYmVyJywgJ2NvZXJjZSc6IGZsb2F0fQogICAgcGFyYW1zWydjdXIxJ10gPSB7J3JlcXVpcmVkJzogVHJ1ZSwgJ3ZhbGlkYXRvcic6IHZhbGlkYXRlX2N1cnJlbmN5LCAnY29lcmNlJzogbGFtYmRhIHM6IHMudXBwZXIoKX0KICAgIHBhcmFtc1snY3VyMiddID0geydyZXF1aXJlZCc6IFRydWUsICd2YWxpZGF0b3InOiB2YWxpZGF0ZV9jdXJyZW5jeSwgJ2NvZXJjZSc6IGxhbWJkYSBzOiBzLnVwcGVyKCl9CiAgICBwYXJhbXNbJ2RhdGUnXSA9IHsncmVxdWlyZWQnOiBGYWxzZSwgJ3R5cGUnOiAnZGF0ZScsICdjb2VyY2UnOiBsYW1iZGEgczogZGF0ZXRpbWUuc3RycHRpbWUocywgJyVZLSVtLSVkJyl9CiAgICBpbnB1dCA9IGRpY3QoemlwKHBhcmFtcy5rZXlzKCksIGlucHV0KSkKCiAgICAjIHZhbGlkYXRlIHRoZSBtYXBwZWQgaW5wdXQgYWdhaW5zdCB0aGUgdmFsaWRhdG9yCiAgICAjIGlmIHRoZSBpbnB1dCBpcyB2YWxpZCByZXR1cm4gYW4gZXJyb3IKICAgIHYgPSBWYWxpZGF0b3IocGFyYW1zLCBhbGxvd191bmtub3duID0gVHJ1ZSkKICAgIGlucHV0ID0gdi52YWxpZGF0ZWQoaW5wdXQpCiAgICBpZiBpbnB1dCBpcyBOb25lOgogICAgICAgIHJhaXNlIFZhbHVlRXJyb3IKCiAgICB0cnk6CgogICAgICAgIGRhdGUgPSAnbGF0ZXN0JzsKICAgICAgICBpZiAnZGF0ZScgaW4gaW5wdXQua2V5cygpOgogICAgICAgICAgICBkYXRlID0gaW5wdXRbJ2RhdGUnXS5zdHJmdGltZSgnJVktJW0tJWQnKQoKICAgICAgICBpZiBpbnB1dFsnY3VyMSddID09IGlucHV0WydjdXIyJ106CiAgICAgICAgICAgIHJldHVybiBpbnB1dFsnYW10J10KCiAgICAgICAgdXJsID0gJ2h0dHBzOi8vYXBpLmV4Y2hhbmdlcmF0ZXNhcGkuaW8vJytkYXRlKyc/YmFzZT0nICsgaW5wdXRbJ2N1cjEnXQogICAgICAgIHJlc3BvbnNlID0gcmVxdWVzdHMuZ2V0KHVybCkKICAgICAgICByYXRlcyA9IHJlc3BvbnNlLmpzb24oKVsncmF0ZXMnXQoKICAgICAgICBjb252ZXJzaW9uX3JhdGUgPSByYXRlc1tpbnB1dFsnY3VyMiddXQogICAgICAgIHJlc3VsdCA9IFtbaW5wdXRbJ2FtdCddKmNvbnZlcnNpb25fcmF0ZV1dCgogICAgICAgIGZsZXgub3V0cHV0LmNvbnRlbnRfdHlwZSA9ICJhcHBsaWNhdGlvbi9qc29uIgogICAgICAgIGZsZXgub3V0cHV0LndyaXRlKHJlc3VsdCkKCiAgICBleGNlcHQ6CiAgICAgICAgcmFpc2UgUnVudGltZUVycm9yCgoKZGVmIHZhbGlkYXRlX2N1cnJlbmN5KGZpZWxkLCB2YWx1ZSwgZXJyb3IpOgoKICAgIGN1cnJlbmN5X3R5cGVzID0gWwogICAgICAgICdDQUQnLCdIS0QnLCdJU0snLCdQSFAnLCdES0snLCdIVUYnLCdDWksnLCdHQlAnLCdST04nLCdTRUsnLAogICAgICAgICdJRFInLCdJTlInLCdCUkwnLCdSVUInLCdIUksnLCdKUFknLCdUSEInLCdDSEYnLCdFVVInLCdNWVInLAogICAgICAgICdCR04nLCdUUlknLCdDTlknLCdOT0snLCdOWkQnLCdaQVInLCdVU0QnLCdNWE4nLCdTR0QnLCdBVUQnLAogICAgICAgICdJTFMnLCdLUlcnLCdQTE4nCiAgICBdCiAgICBpZiBhbnkodmFsdWUgaW4gYyBmb3IgYyBpbiBjdXJyZW5jeV90eXBlcyk6CiAgICAgICAgcmV0dXJuCgogICAgZXJyb3IoZmllbGQsICdpcyBhbiBpbnZhbGlkIGN1cnJlbmN5IHR5cGUnKQo="
            }
        ]
    }
}
